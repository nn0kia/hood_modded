 getgenv().OldAimPart = "HumanoidRootPart"
 getgenv().AimPart = "HumanoidRootPart"
 getgenv().AimRadius = 30
 getgenv().ThirdPerson = true
 getgenv().FirstPerson = true
 getgenv().TeamCheck = false
 getgenv().line = false
 getgenv().linecolor2 = Color3.fromRGB(4,0,255)
 getgenv().keybind ="q"
 getgenv().PredictMovement = false
 getgenv().PredictionVelocity = 12.29
 getgenv().CheckIfJumped = true
 getgenv().Smoothness = false
 getgenv().WallCheck = false
 getgenv().SmoothnessAmount = 0.05
 getgenv().Notificationmode = true
 Aimlock = true
 
 
 local CurrentCamera = game:GetService "Workspace".CurrentCamera
 local services = setmetatable({ }, {
     __index = function(t,k)
         return game:GetService(k)
     end
 })
 local Players = services.Players
 local Uisf = services.UserInputService
 local Workgalaxy = services.Workspace
 local RService = services.RunService
 local SGui = services.StarterGui
 local Inset2 = game:GetService("GuiService"):GetGuiInset().Y
 

 
 
 local mousef = game.Players.LocalPlayer:GetMouse()
 local Clientuser = Players.LocalPlayer
 local runshit = game:GetService("RunService")
 local localnigger = game.Players.LocalPlayer
 local Line2 = Drawing.new("Line")
 
 
 local camgay = Workspace.CurrentCamera
 
 local CF = CFrame.new
 local RNew = Ray.new
 local Vec3 = Vector3.new
 local Vec2 = Vector2.new
 
 local Aimlock, MousePressed, CanNotify = false, false, false
 local AimlockTarget, OldPre
 
 
 
 local Target, PartMode, Partz, NotifMode, PredictionF
 
 
getgenv().GetObscuringObjects = function(T)
    if T and T:FindFirstChild(AimPart) and Clientuser and Clientuser.Character:FindFirstChild("Head") then 
        local RayPos = workspace:FindPartOnRay(RNew(T[AimPart].Position, Clientuser.Character.Head.Position))
        if RayPos then return RayPos:IsDescendantOf(T) end
    end
end
 
 
 
 local GetNearestTarget = function()
 local mousef = game.Players.LocalPlayer:GetMouse()
 local Clientuser = Players.LocalPlayer

 local plr1g2 = nil;
     local distance = 99999;
     
     for i, v in next, Players:GetPlayers() do
         if v.Name ~= Clientuser.Name then
             --if v.Character and v.Team ~= Clientuser.Team then
             if v.Character then
                 local pos,aaaa = camgay:WorldToViewportPoint(v.Character.Head.Position);
                 local mouse = Uisf:GetMouseLocation()
                 local magnitude = (Vec2(pos.X, pos.Y) - Vec2(mousef.X, mousef.Y)).magnitude;
 
                 if aaaa and (magnitude < distance) then
                     plr1g2 = v;
                     distance = magnitude;
                 end
             end
         end
     end
     
     return plr1g2;
 end
 
 
 mousef.KeyDown:Connect(function(k)
     if k ~= keybind then return end
     if Aimlock and AimlockTarget == nil then
         if MousePressed ~= true then MousePressed = true end 
         local Target;Target = GetNearestTarget()
         if Target ~= nil then
             AimlockTarget = Target
             if getgenv().Notificationmode then
             notif:Notification("Viurs.CC","Locked:"..AimlockTarget.DisplayName,"Code","Code",2.4) 
             end
     end
     else
         if AimlockTarget ~= nil then AimlockTarget = nil end
         if MousePressed ~= false then 
             MousePressed = false 
             if getgenv().Notificationmode then
             notif:Notification("Viurs.CC","Unlocked","Code","Code",5) 
             end
             Line2.Visible = false
         end
     end
 end)
 
 runshit.Stepped:connect(function()
     if line == true then
         local Vector = CurrentCamera:WorldToViewportPoint(AimlockTarget.Character[AimPart].Position)
         Line2.Color = getgenv().linecolor2                                                              
         Line2.Thickness = 2.5
         Line2.Transparency = 1
  
 
         Line2.From = Vector2.new(mousef.X, mousef.Y + Inset2)
         Line2.To = Vector2.new(Vector.X, Vector.Y)
         Line2.Visible = true
     else
         Line2.Visible = false
 
     end
 end)
 
 
 
 
 
 
 
 RService.RenderStepped:Connect(function()
     if ThirdPerson == true and FirstPerson == true then 
        if WallCheck == true and not GetObscuringObjects(AimlockTarget) then
         if (camgay.Focus.p - camgay.CoordinateFrame.p).Magnitude > 1 or (camgay.Focus.p - camgay.CoordinateFrame.p).Magnitude <= 1 then 
             CanNotify = true 

         else 
             CanNotify = false 
         end
     elseif ThirdPerson == true and FirstPerson == false then 
        
         if (camgay.Focus.p - camgay.CoordinateFrame.p).Magnitude > 1 then 
             CanNotify = true 
         else 
             CanNotify = false 
         end
     elseif ThirdPerson == false and FirstPerson == true then 
         if (camgay.Focus.p - camgay.CoordinateFrame.p).Magnitude <= 1 then 
             CanNotify = true 
         else 
             CanNotify = false 
         end
     end
     if Aimlock == true and MousePressed == true then 
         if AimlockTarget and AimlockTarget.Character and AimlockTarget.Character:FindFirstChild(AimPart) then 
             if FirstPerson == true then
                 if CanNotify == true then
                        

                     if PredictMovement == true then
                         if Smoothness == true then
                             local Main = CF(camgay.CFrame.p, AimlockTarget.Character[AimPart].Position + AimlockTarget.Character[AimPart].Velocity/PredictionVelocity)
                             
                             camgay.CFrame = camgay.CFrame:Lerp(Main, SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                         else
                             camgay.CFrame = CF(camgay.CFrame.p, AimlockTarget.Character[AimPart].Position + AimlockTarget.Character[AimPart].Velocity/PredictionVelocity)
                         end
                     elseif PredictMovement == false then 
                         if Smoothness == true then
                           
                             local Main = CF(camgay.CFrame.p, AimlockTarget.Character[AimPart].Position)
 
                            
                             camgay.CFrame = camgay.CFrame:Lerp(Main, SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                         else
                             camgay.CFrame = CF(camgay.CFrame.p, AimlockTarget.Character[AimPart].Position)
                         end
                     end
                    end
                                            

                     if PredictMovement == true then
                         if Smoothness == true then
                             local Main = CF(camgay.CFrame.p, AimlockTarget.Character[AimPart].Position + AimlockTarget.Character[AimPart].Velocity/PredictionVelocity)
                             
                             camgay.CFrame = camgay.CFrame:Lerp(Main, SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                         else
                             camgay.CFrame = CF(camgay.CFrame.p, AimlockTarget.Character[AimPart].Position + AimlockTarget.Character[AimPart].Velocity/PredictionVelocity)
                         end
                     elseif PredictMovement == false then 
                         if Smoothness == true then
                           
                             local Main = CF(camgay.CFrame.p, AimlockTarget.Character[AimPart].Position)
 
                            
                             camgay.CFrame = camgay.CFrame:Lerp(Main, SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
                         else
                             camgay.CFrame = CF(camgay.CFrame.p, AimlockTarget.Character[AimPart].Position)
                         end
                     end
                    end
                 end
             end
         end

 
 
if getgenv().CheckIfJumped == true then
		if AimlockTarget.Character.Humanoid.FloorMaterial == Enum.Material.Air and AimlockTarget.Character.Humanoid.Jump == true then

			getgenv().AimPart = "LowerTorso"
		else
			getgenv().AimPart = getgenv().OldAimPart

		end
	end
end)
